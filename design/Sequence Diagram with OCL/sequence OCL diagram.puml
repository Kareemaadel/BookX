@startuml
actor User as u
participant UserManager as um
participant User as user
participant Book as b
participant Exchange as e
participant Feedback as f
participant Report as r


' --- User Registration ---
u -> um : getInstance()
activate um
um --> um : Return instance of UserManager
deactivate um
u -> um : register(name, email, password, contactNumber, address)
activate um
note right
<<OCL>>
context UserManager::register(name: String, email: String, password: String, contactNumber: String, address: String)
pre: name <> "" and email.matches("^[\\w-\\.+]*[\\w-\\.]\\@[\\w]+\\.[\\w]+(\\.[\\w]+)*$") and password.size() >= 8 and contactNumber.matches("^[0-9]+$") and address <> ""
post: User.allInstances()->exists(u | u.name = name and u.email = email and u.contactNumber = contactNumber and u.address = address)
end note
um --> user : Return new User instance
deactivate um

' --- Listing a Book ---
u -> user : createBook(title, author, genre, condition)
activate user
note right
<<OCL>>
context User::createBook(title: String, author: String, genre: String, condition: String)
pre: title <> "" and author <> "" and genre <> "" and condition in ["new", "used"]
post: Book.allInstances()->exists(b | b.title = title and b.author = author and b.genre = genre and b.condition = condition and b.status = "available")
end note
user -> b : Create Book instance
activate b
b --> user : Return Book instance
deactivate b
b -> b : listBook()
activate b
b --> u : Book listed successfully
deactivate b
deactivate user

' --- Initiating an Exchange ---
u -> user : createExchange(bookOffered, bookRequested)
activate user
note right
<<OCL>>
context User::createExchange(bookOffered: Book, bookRequested: Book)
pre: bookOffered.status = "available" and bookRequested.status = "available" and bookOffered <> bookRequested
post: Exchange.allInstances()->exists(e | e.bookOffered = bookOffered and e.bookRequested = bookRequested and e.status = "pending")
end note
user -> e : Create Exchange instance
activate e
b -> e : Associate offered and requested books
user -> e : initiateExchange()
note right
<<OCL>>
context Exchange::initiateExchange()
pre: self.status = "pending"
post: self.participants->size() = 2 and self.status = "pending"
end note
e --> u : Exchange initiated
deactivate e
deactivate user

' --- Providing Feedback ---
u -> user : provideFeedback(exchange, rating, comment)
activate user
note right
<<OCL>>
context User::provideFeedback(exchange: Exchange, rating: int, comment: String)
pre: exchange.status = "completed" and rating >= 1 and rating <= 5 and comment <> ""
post: Feedback.allInstances()->exists(f | f.exchange = exchange and f.rating = rating and f.comment = comment)
end note
user -> f : Create Feedback instance
activate f
f -> e : Associate feedback with exchange
f -> f : provideFeedback()
f --> u : Feedback provided successfully
deactivate f
deactivate user

' --- Reporting an Issue ---
u -> user : reportIssue(book, reason)
activate user
note right
<<OCL>>
context User::reportIssue(book: Book, reason: String)
pre: book.status = "available" and reason <> ""
post: Report.allInstances()->exists(r | r.book = book and r.reason = reason and r.status = "pending")
end note
user -> r : Create Report instance
activate r
b -> r : Associate book with report
u -> r : submitReport()
note right
<<OCL>>
context Report::submitReport()
pre: self.status = "pending"
post: self.details <> "" and self.status = "submitted"
end note
r --> u : Report submitted successfully
deactivate r
deactivate user

' --- Viewing Exchange History ---
u -> user : viewExchangeHistory()
activate user
note right
<<OCL>>
context User::viewExchangeHistory()
pre: self.exchanges->notEmpty()
post: result = self.exchanges->select(e | e.participants->includes(self))
end note
user -> e : Retrieve exchanges involving user
activate e
e --> u : Return exchange history
deactivate e
deactivate user

' --- Browsing Books ---
u -> user : browseBooks()
activate user
note right
<<OCL>>
context User::browseBooks()
post: result = Book.allInstances()->select(b | b.status = "available")
end note
user -> b : Retrieve available books
activate b
b --> u : Return list of books
deactivate b
deactivate user

@enduml
