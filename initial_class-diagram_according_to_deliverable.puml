@startuml

' --- User Class ---
class User {
    - id
    - name
    - email
    - contactNumber
    - address
    + register()
    + login()
    + updateProfile()
    + viewListedBooks()
    + requestExchange()
}

' --- Admin Class ---
class Admin {
    - id
    - name
    - email
    + manageReport()
    + deleteUser()
    + deleteBook()
    + moderateExchange()
    + deleteReport()
}

' --- Book Class ---
class Book {
    - id
    - title
    - author
    - genre
    - condition
    - status  ' e.g., "available", "exchanged"
    + listBook()
    + updateBookStatus()
    + viewBookDetails()
}

' --- Exchange Class ---
class Exchange {
    - id
    - date
    - status  ' e.g., "pending", "completed", "cancelled"
    + initiateExchange()
    + acceptExchange()
    + cancelExchange()
    + completeExchange()
}

' --- Report Class ---
class Report {
    - id
    - reason  ' e.g., inappropriate listing
    - details
    - status  ' e.g., "pending", "resolved"
    + submitReport()
    + resolveReport()
    + escalateReport()
}

' --- Feedback Class ---
class Feedback {
    - id
    - rating
    - comment
    + provideFeedback()
    + updateFeedback()
}

' --- Search Class ---
class Search {
    - keywords
    - filters  ' e.g., title, author, genre
    + searchBooks()
    + filterBooks()
}

' --- Relationships between Classes ---

' Aggregation relationships (hollow diamond)
User "1" o--> "*" Book : Lists          ' Aggregation: A user can list many books, but books can exist independently.
Search "0..*" o--> "*" Book : Filters    ' Aggregation: Search can filter many books, but books exist independently.
Search "0..*" o--> "*" User : FiltersByUser ' Aggregation: Search can filter users, but users exist independently.

' Composition relationships (black diamond)
Exchange "1..*" *--> "*" Book : Includes  ' Composition: An exchange can involve many books, but books cannot exist without an exchange.
Feedback "1" *--> "1" Exchange : Rates   ' Composition: Feedback cannot exist without an exchange.

' Association relationships
User "1" --> "*" Exchange : Participates In  ' Association: A user can participate in many exchanges.
User "0..*" --> "*" Report : Reports    ' Association: Users can report multiple issues.
User "0..*" --> "*" Feedback : Provides  ' Association: Users provide feedback for exchanges.
Exchange "1" --> "2" User : Participants ' Association: An exchange involves exactly two users.
Report "0..*" --> "1" Admin : Manages    ' Association: Admin manages multiple reports.
Admin "1" --> "0..*" Report : Deletes   ' Association: Admin can delete many reports.
Admin "1" --> "0..*" User : Deletes      ' Association: Admin can delete users.
Admin "1" --> "0..*" Book : Deletes     ' Association: Admin can delete books.

@enduml
